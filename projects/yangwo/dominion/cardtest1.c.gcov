        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest1.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest1: cardtest1.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest_1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "smithy"
        -:   24:
        -:   25:
        -:   26:void customAssert(int a, int b);
        -:   27:
        -:   28:
        1:   29:int main() {
        1:   30:    int newCards = 0;
        1:   31:    int discarded = 1;
        1:   32:    int xtraCoins = 0;
        1:   33:    int shuffledCards = 0;
        -:   34:
        -:   35:    int i, j, m;
        1:   36:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   37:    int remove1, remove2;
        1:   38:    int seed = 1000;
        1:   39:    int numPlayers = 2;
        1:   40:    int thisPlayer = 0;
        -:   41:	struct gameState G, testG;
        1:   42:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:			sea_hag, tribute, smithy, council_room};
        -:   44:
        -:   45:	// initialize a game state and player cards
        1:   46:	initializeGame(numPlayers, k, seed, &G);
        -:   47:
        1:   48:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   49:
        -:   50:	// ----------- TEST 1: +3 cards --------------
        1:   51:	printf("TEST 1: +3 cards\n");
        -:   52:
        -:   53:	// copy the game state to a test case
        1:   54:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   55:	//choice1 = 1;
        1:   56:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   57:
        1:   58:	newCards = 3;
        1:   59:	xtraCoins = 0;
        1:   60:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   61:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   62:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   63:	
        1:   64:	customAssert(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   65:	customAssert(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   66:	customAssert(testG.coins, G.coins + xtraCoins);
        -:   67:
        1:   68:	return 0;
        -:   69:}
        -:   70:
        -:   71:
        3:   72:void customAssert(int a, int b){
        -:   73:
        3:   74:	if(a == b)
        -:   75:	{
        3:   76:		printf("test success\n");
        -:   77:	}
        -:   78:	else
        -:   79:	{
    #####:   80:		printf("test failed\n");
        -:   81:	}
        3:   82:}
        -:   83:
        -:   84:
        -:   85:
