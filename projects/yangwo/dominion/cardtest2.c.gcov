        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest2.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest2: cardtest2.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest_2 -g  cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "adventurer"
        -:   24:
        -:   25:
        -:   26:void customAssert(int a, int b);
        -:   27:
        -:   28:
        1:   29:int main() {
        1:   30:    int newCards = 0;
        1:   31:    int discarded = 1;
        1:   32:    int xtraCoins = 0;
        1:   33:    int shuffledCards = 0;
        -:   34:
        -:   35:    int i, j, m;
        1:   36:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   37:    int remove1, remove2;
        1:   38:    int seed = 1000;
        1:   39:    int numPlayers = 2;
        1:   40:    int thisPlayer = 0;
        -:   41:	struct gameState G, testG;
        1:   42:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   43:			sea_hag, tribute, smithy, council_room};
        -:   44:
        -:   45:	// initialize a game state and player cards
        1:   46:	initializeGame(numPlayers, k, seed, &G);
        -:   47:
        1:   48:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   49:
        -:   50:	// ----------- TEST 1: +2 cards in hand from deck--------------
        1:   51:	printf("TEST 1: choice1 = 1 = +2 cards\n");
        -:   52:
        -:   53:	// copy the game state to a test case
        1:   54:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   55:	choice1 = 1;
        -:   56:	
        -:   57:
        -:   58:	//before calling adventurer
        1:   59:	printf("hand count = %d\n", testG.handCount[thisPlayer]);
        1:   60:	printf("showing hand contents \n");
        6:   61:	for(i = 0 ; i < testG.handCount[thisPlayer]; i++)
        5:   62:		printf("[%d]th = %d\n", i+1, testG.hand[thisPlayer][i]);
        -:   63:
        1:   64:	printf("deck count = %d\n", testG.deckCount[thisPlayer]);	
        1:   65:	printf("showing deck contents \n");
        6:   66:	for(i = 0 ; i < testG.deckCount[thisPlayer]; i++)
        5:   67:		printf("[%d]th = %d\n", i+1, testG.deck[thisPlayer][i]);
        -:   68:	
        1:   69:	printf("discard count = %d\n", testG.discard[thisPlayer]);
        -:   70:		
        -:   71:
        1:   72:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   73:
        1:   74:	newCards = 2;
        1:   75:	xtraCoins = 0;
        -:   76:
        -:   77:	//after calling adventure
        1:   78:	printf("hand count = %d\n", testG.handCount[thisPlayer]);
        1:   79:	printf("showing hand contents \n");
        8:   80:	for(i = 0 ; i < testG.handCount[thisPlayer]; i++)
        7:   81:		printf("[%d]th = %d\n", i+1, testG.hand[thisPlayer][i]);
        -:   82:	
        1:   83:	printf("deck count = %d\n", testG.deckCount[thisPlayer]);
        1:   84:	printf("showing deck contents \n");
        4:   85:	for(i = 0 ; i < testG.deckCount[thisPlayer]; i++)
        3:   86:		printf("[%d]th = %d\n", i+1, testG.deck[thisPlayer][i]);
        -:   87:	
        1:   88:	printf("discard count = %d\n", testG.discard[thisPlayer]);
        -:   89:	
        -:   90:
        1:   91:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   92:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   93:	
        -:   94:	
        1:   95:	customAssert(testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   96:	customAssert(testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   97:
        1:   98:	return 0;
        -:   99:}
        -:  100:
        -:  101:
        2:  102:void customAssert(int a, int b){
        -:  103:
        2:  104:	if(a == b)
        -:  105:	{
        1:  106:		printf("test success\n");
        -:  107:	}
        -:  108:	else
        -:  109:	{
        1:  110:		printf("test failed\n");
        -:  111:	}
        2:  112:}
        -:  113:
